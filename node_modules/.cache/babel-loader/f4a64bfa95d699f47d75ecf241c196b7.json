{"ast":null,"code":"import _defineProperty from \"/home/kiran/burgerbuilder/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/home/kiran/burgerbuilder/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/kiran/burgerbuilder/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/kiran/burgerbuilder/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/kiran/burgerbuilder/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/kiran/burgerbuilder/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/kiran/burgerbuilder/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/kiran/burgerbuilder/src/containers/Auth/Auth.js\";\nimport React, { Component } from 'react';\nimport Input from '../../components/UI/Input/Input';\nimport Button from '../../components/UI/Button/Button';\nimport classes from './Auth.css';\n\nvar Auth =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Auth, _Component);\n\n  function Auth() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Auth);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Auth)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.State = {\n      controls: {\n        email: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'email',\n            placeholder: 'mail Address'\n          },\n          value: '',\n          validation: {\n            required: true,\n            isEmail: true\n          },\n          valid: false,\n          touched: false\n        },\n        password: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'password',\n            placeholder: 'password'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 6\n          },\n          valid: false,\n          touched: false\n        }\n      }\n    };\n\n    _this.inputChangedHandler = function (event, inputIdentifier) {\n      var updatedControls = _objectSpread({}, _this.state.controls, _defineProperty({}, controlName, _objectSpread({}, _this.state.controls[controlName], {\n        value: event.target.value,\n        valid: _this.checkValidity(event.target.value, _this.state.controls[controlName].validation)\n      })));\n\n      var updatedFormElement = _objectSpread({}, updatedOrderForm[inputIdentifier]);\n\n      updatedFormElement.value = event.target.value;\n      updatedFormElement.valid = _this.checkValidity(updatedFormElement.value, updatedFormElement.validation);\n      updatedFormElement.touched = true;\n      updatedOrderForm[inputIdentifier] = updatedFormElement;\n      var formIsValid = true;\n\n      for (var _inputIdentifier in updatedOrderForm) {\n        formIsValid = updatedOrderForm[_inputIdentifier].valid && formIsValid;\n      }\n\n      _this.setState({\n        orderForm: updatedOrderForm,\n        formIsValid: formIsValid\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Auth, [{\n    key: \"checkValidity\",\n    value: function checkValidity(value, rules) {\n      var isValid = true;\n\n      if (!rules) {\n        return true;\n      }\n\n      if (rules.required) {\n        isValid = value.trim() !== '' && isValid;\n      }\n\n      if (rules.minLength) {\n        isValid = value.length >= rules.minLength && isValid;\n      }\n\n      if (rules.maxLength) {\n        isValid = value.length <= rules.maxLength && isValid;\n      }\n\n      return isValid;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var formElementsArray = [];\n\n      for (var key in this.state.controls) {\n        formElementsArray.push({\n          id: key,\n          config: this.state.controls[key]\n        });\n      }\n\n      var form = formElementsArray.map(function (formElement) {\n        return React.createElement(Input, {\n          key: formElement.id,\n          elementType: formElement.config.elementType,\n          elementConfig: formElement.config.elementConfig,\n          value: formElement.config.value,\n          invalid: !formElement.config.valid,\n          shouldValidate: formElement.config.validation,\n          touched: formElement.config.touched,\n          changed: function changed(event) {\n            return _this2.inputChangedHandler(event, formElement.id);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 96\n          },\n          __self: this\n        });\n      });\n      return React.createElement(\"div\", {\n        className: classes.Auth,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, React.createElement(\"form\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, form, React.createElement(Button, {\n        btnType: \"Success\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, \"SUBMIT\")));\n    }\n  }]);\n\n  return Auth;\n}(Component);\n\nexport default Auth;","map":{"version":3,"sources":["/home/kiran/burgerbuilder/src/containers/Auth/Auth.js"],"names":["React","Component","Input","Button","classes","Auth","State","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","inputChangedHandler","event","inputIdentifier","updatedControls","state","controlName","target","checkValidity","updatedFormElement","updatedOrderForm","formIsValid","setState","orderForm","rules","isValid","trim","length","maxLength","formElementsArray","key","push","id","config","form","map","formElement"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport Input from '../../components/UI/Input/Input'\nimport Button from '../../components/UI/Button/Button'\nimport classes from './Auth.css';\n\nclass Auth extends Component {\n     State = {\n         controls:{\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'mail Address'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    isEmail:true\n                },\n                valid: false,\n                touched: false\n            },\n            password: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'password',\n                    placeholder: 'password'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 6\n                },\n                valid: false,\n                touched: false\n            },\n         }\n     }\n\n     checkValidity(value, rules) {\n        let isValid = true;\n        if(!rules) {\n            return true;\n        }\n        \n        if (rules.required) {\n            isValid = value.trim() !== '' && isValid;\n        }\n\n        if (rules.minLength) {\n            isValid = value.length >= rules.minLength && isValid\n        }\n\n        if (rules.maxLength) {\n            isValid = value.length <= rules.maxLength && isValid\n        }\n\n        return isValid;\n    }\n\n    inputChangedHandler = (event, inputIdentifier) => {\n        const updatedControls = {\n            ...this.state.controls,\n            [controlName]: {\n                ...this.state.controls[controlName],\n                value: event.target.value,\n                valid: this.checkValidity(event.target.value, this.state.controls[controlName].validation)\n            }\n        };\n        const updatedFormElement = { \n            ...updatedOrderForm[inputIdentifier]\n        };\n        updatedFormElement.value = event.target.value;\n        updatedFormElement.valid = this.checkValidity(updatedFormElement.value, updatedFormElement.validation);\n        updatedFormElement.touched = true;\n        updatedOrderForm[inputIdentifier] = updatedFormElement;\n        \n        let formIsValid = true;\n        for (let inputIdentifier in updatedOrderForm) {\n            formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\n        }\n        this.setState({orderForm: updatedOrderForm, formIsValid: formIsValid});\n    }\n\n     render () {\n        const formElementsArray = [];\n        for ( let key in this.state.controls ) {\n            formElementsArray.push( {\n                id: key,\n                config: this.state.controls[key]\n            } );\n        }\n\n        const form = formElementsArray.map(formElement => (\n            <Input\n                key={formElement.id}\n                elementType={formElement.config.elementType}\n                elementConfig={formElement.config.elementConfig}\n                value={formElement.config.value}\n                invalid={!formElement.config.valid}\n                shouldValidate={formElement.config.validation}\n                touched={formElement.config.touched}\n                changed={(event) => this.inputChangedHandler(event, formElement.id)} />\n        ) );\n    \n        return (\n            <div className={classes.Auth}>\n                <form>\n                    {form}\n                    <Button btnType=\"Success\">SUBMIT</Button>\n\n                </form>\n            </div>\n        );\n    }\n}\n\nexport default Auth;"]},"metadata":{},"sourceType":"module"}